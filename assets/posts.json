{
    "data": [
        {
            "id": "hello-world",
            "title": "Hello World",
            "date": "02/09/2020",
            "content": [
                "Nearly every webdev article seems to say that I should have some kind of blog charting my journey through learning webdev, so I finally gave in. Of course as a webdev student it wouldn't make any sense to blog on someone elses site, so I'm building my own. I don't know enough about webdev yet to build anything other than a static site, so the beginning of this blog isn't going to look pretty. I am currently typing this blog post directly into the HTML file, and I doubt the blog is going to look pretty at the end of tonight. Let's see for ourselves:",
                "![The blog as it appeared on the day of this post](https://i.ibb.co/FXtwMbX/blog-02092020.pnge \"The blog as it appeared on 02/09/2020\")", 
                "Not my best work! But I figured it was better to get into the practice of blogging frequently over waiting to build a site to the standards I'd like to. It should also be interesting to see the evolution of the blog site itself over time!",
                "A little background on me: I started webdev as a hobby early last year as a way to cope with unemployment using [Free Code Camp](https://www.freecodecamp.org/) and various other online resources. A combination of running into a wall learning-wise and re-employment caused me to stray from the path shortly after I started learning React-Redux. It never really left my head, though, and in the fall of 2019 I applied to be in [Lambda School](https://lambdaschool.com/) and was accepted into the Web 28 cohort, starting in January.",
                "It's been a whirlwind of a time since then, spending at least 8 hours a day nearly every day either learning or coding. I've just now officially finished the first unit, which means I officially owe them money, so I suppose there's no dropping out at this point! In all seriousness, it's been a great learning experience so far and I'd definitely give my recommendation to them. It's not for the faint of heart; the learning pace is breakneck and the material covered is challenging. But the community is extremely supportive and if you ask for help and connect with your peers, I have no doubt you too could make it in this program. I need to stop ranting and start building this blog site, so I'll leave it there for now. Here's hoping I make it past more than one post!"
            ]
        },
        {
            "id": "back-for-seconds",
            "title": "Back For Seconds",
            "date": "02/10/2020",
            "content": [
                "So I made it to the second post, more than I can say about any previous attempts at any kind of writing. Maybe it's the fact that I'm building the blog as well as writing in it that's keeping me going. After today's lesson I'm confident that very soon I'll know how to implement a better system than writing blogposts directly into HTML, so that's a plus.",
                "Today was an interesting day, as it was the first day back on regular lessons after my first build week. What's build week, you ask? It's a week I have to work with a team to make a working app, or at least that's what it's going to be next time. This time I made a static marketing site for the app, which is a bit less exciting but much more within my skillset. I think it turned out well, you can judge for yourself [here](https://watermyplants3.github.io/marketing-ui/) (I made the homepage and about page, as well as the header and footer present on every page).",
                "Anyway, the first day back was interesting. I watched the videos in the training kit and felt a bit out of my depth initially, with all this talk about Document Object Model and assigning elements to variables. After the lesson I felt I had a more solid grasp on the task at hand, so I took a swing at the project. I was fairly easily able to perform the task I had been assigned, but I wasn't satisfied with my code.",
                "Since the first day here at Lambda School, they've been telling us to make sure to write code that Doesn't Repeat Yourself, or DRY for short. Even someone who has never touched coding could see that the code I had written repeated myself quite a bit.",
                "![Some pretty bad but passing code](https://i.ibb.co/jrvBcvd/code-bad.png \"No bueno\")",
                "Even though my code made the webpage display correctly, it wasn't good code. You can see where, towards the middle, I began to write it in a slightly different way so that it was a bit less tedious but it was still the same pattern of writing a line to assign an element to a variable, then writing some code to put text in that element. I still had a stretch project left to complete, but I knew there had to be a better way. I did some research and read a bunch of documentation and spent around another hour tinkering with the project and ended up with what I think is a much better result: ",
                "![My best effort at code that is not repetitive](https://i.ibb.co/XpJDd4D/code-good.png \"I even remembered to comment!\")",
                "To someone who can't read code it's much harder to suss out what this code does, but at the very least you can see that there's not much repetition to be found, and without the comments it's about half as many lines. I wasn't going to get a better grade because I wrote my code better, but I finally felt at peace enough to move on to the stretch project of building a [timer](http://jacobengland.computer/DOM-I/stretch-assignment/digital_timer/). All in all, I feel like I had a productive day, and I'm sure the drive to keep doing more than I'm asked to or will even necessarily be rewarded for is going to benefit me as far as my learning experience goes."
            ]
        },
        {
            "id": "an-event-full-day",
            "title": "An Event-full day",
            "date": "02/11/2020",
            "content": [
                "Probably gonna be a short post today, it was kind of a slow and unproblematic day. Today was the second half of the beginning of lessons really starting to get into what modern internet development is about. Yesterday was about dynamically inserting content and styling onto a page, and today was all about writing code to handle \"events,\" such as a click, a scroll, or a key press. The styling language CSS has been updated since its beginnings to be able to handle some more basic events like clicking a button or detecting if the mouse is hover over an element on the page, but they aren't really useful for anything other than changing how something looks or where it is on the page",
                "Most of the code used to handle these events follows the same basic structure. First we store an element on the page, like say the date at the top of this post. If you go inside of the code, it would be enclosed in a time tag, so we would tell Javascript to look for elements inside of time tags and put them in a list. Then we would write code that would say to look at everything in that list and assign it what is called an \"event listener,\" which is really just what it sounds like: a function that is waiting for an event to happen. You have to tell it which event it is listening for, so in this case maybe a click. All that's left to do is to tell it what to do when it registers a click, something like turning the text red. And that's it! The code we write might end up looking something like this:",
                "![Example code for an event listener function](https://i.ibb.co/QpzP5Bx/event-listener.png \"No comments today! For shame!\")",
                "And you're done! It might still look a little complicated but it's really just those three steps: make a variable point at a page element, tack a function on to tell it which event to wait for, and tell it what to do when that event happens. If you can remember those three steps you're well on your way to your first baby steps in making web pages that react to your user's input! If you're where I was earlier today though, now you have to think of ten different things to make a webpage do, and that's a different beast entirely. . ."
            ]
        },
        {
            "id": "blog-expansion",
            "title": "Blog Expansion",
            "date": "02/12/2020",
            "content": [
                "If you scroll through the blog today you may notice a few new things! Most notably, all the blog posts can now be expanded to show more content or, conversely, contracted to hide all but the first paragraph. This allows me to fit more content within the window view, which I guess isn't a problem at this point but we're planning on it being one! I also made it so that the latest post is expanded but all the older ones aren't, which may sound like something that happens automatically, but it was actually a pain!",
                "The expanding and contracting actually has more to do with yesterday's curriculum than today's, despite what you might think. It's mostly a simple trick: I added a button and when you click it, it hides itself and makes the rest of the content appear, along with a closing button at the bottom. When you click the bottom button? It hides the content and itself and makes the top button appear! You could do it all day if you wanted to, but it'd make it pretty hard to read this blog post.",
                "As far as deciding whether a post is open or closed when you first load the page, it's almost as simple. I just have Javascript make a list of all the posts, and hide the lower content on all but the last one. The last one? Surely I mean the first one! Well if you look at the HTML for the page you would see that in there all the posts are in top-to-bottom chronological order, whereas the posts are displayed in the opposite of that order. So the most recent post is the last post in the list, which might fool someone who isn't familiar with the rest of the site's code, or me earlier today when I was trying to hide all but the first post on the page.",
                "All that was left to do at that point was add some fancy button styles- or so I thought. At the last second before I was going to upload the finished site, I noticed an annoying bug. When you clicked the expand button, about 90% of the time the page would scroll you to the bottom of the post and you'd have to scroll back up to where you left off.",
                "![An animated gif showing the expansion bug](https://i.ibb.co/sJPK1TM/bad-expand.gif \"Wow, he has GIFs now? The money really changed him\")",
                "Not a life-ending bug, but certainly an annoying one, and I can't afford to lose any of my readers with the holidays fast approaching. So I spent another hour researching and experimenting. None of the solutions on long-abandoned help threads seemed to help, and a lot of the solutions I came up with would have worked in a different situation but not this one. Finally, after the fifth or sixth page on scroll properties, inspiration struck: scroll is saved as a number representing how far from the top you've scrolled, so if I saved that value before adding the content, I could manually set the user's scroll to be the same once I added the content. It seemed like a far-fetched solution to me when I spun it up, but once I implemented it I could see that it worked like a dream! Crisis averted.",
                "As far as today's curriculum, it was about using Javascript to take raw text data and make it into page elements like titles and paragraphs. This is something I've desperately wanted to do to this blog. However, next week we're going to be learning a much more advanced method for doing this that will make it even easier than it would be if I used what I learned today to do it, so I'm going to hold off and keep hard-coding all the blog posts into the HTML. Instead, I kept in mind that I was going to refactor soon and built my button component in a more future-proof way than I might have normally. Hopefully I guessed correctly and won't have to redo everything I did today next week, but if I do that's just more practice! Stay posted and we'll both find out."
            ]
        },
        {
            "id": "fun-with-apis",
            "title": "Fun With APIs",
            "date": "02/13/2020",
            "content": [
                "Today started out feeling like an intimidating day, but as it went on it became a lot more easy and I even acquired some fun skills that will let me build more fun things than I even imagined I could have yesterday! In fact the first one of those things is in this very post! At the beginning of the day they told us we were going to be learning about \"promises\" which, frankly, sounds like some kind of cult to me. It turns out it's just a fancy name for telling your code to do something while it's waiting on something to load! Not actually very scary at all.",
                "The rest of what we learned about was how to use APIs, which is not something I was expecting to get to so early. Basically an API is code someone else wrote that allows you to access a database on their end. The example they made us build was kind of boring, just taking our Github profile and displaying information from it in a list. But since I was brimming with newfound knowledge and had a bit of time to kill I decided to build my own component using what I learned. I looked around for an API to build on and found that NASA has a public API that allows me to get some pretty cool stuff. So I started reading the documentation and ended up building an element that displays a different photo from NASA every day:",
                "## This part has not yet been converted to be useable on the new site, you can check out my newer better project [here](http://jacobengland.computer/nasa-photo-of-the-day/)",
                "It might not look like much right now but I promise if you come back tomorrow, it'll be a different picture. I initially intended to make it so you could browse through several different photos but it ended up being much more difficult than I anticipated and I'm short on time today, so maybe some other time. But as it is, it makes a request from NASA for the photo, description, and link to a higher res version, and then automatically builds a component out of them and puts it into the page. I'm pretty excited to see what other APIs I can find and what I can build with them, because this definitely seems like it's just the beginning!"
            ]
        },
        {
            "id": "react-week",
            "title": "React Week",
            "date": "02/17/2020",
            "content": [
                "This week's posts might be a little light on content because it's finally React week! Some of you might be wondering what that means, but don't worry, we'll get to that in the rest of the post. Basically what it means for the blog is I'll finally be refactoring it to work more like a regular website, with a text box I type into to enter my posts into the website instead of me writing my posts directly into the code. In fact, the HTML file for the website will be looking much more bare than it does right now. Exciting stuff that we'll be getting into in the upcoming days!",
                "But I'm getting ahead of myself, I need to catch everyone up on what exactly React is. React is one of many libraries available to developers, a library being a set of code another developer wrote to make their lives easier that I now get to use to make mine easier. In this case the developers who wrote the code are the developers of Facebook, and the part of my life that's going to be easier is building the user interface - the face of my website. This all gets quite high level, so I most likely won't cover all the specifics but from what I've done in React so far, they've made the coding much more easy and the code much more readable.",
                "Take, for example, this very blog post. As it is the code for just this post is very verbose. If you scroll through my HTML it's a massive block of text, which can make it quite difficult to work with. Here's as much of it as I can fit into a screenshot:",
                "![The code for this post](https://i.ibb.co/SfCXHt0/this-very-post.png \"No reading ahead for spoilers!\")",
                "And that's about as concise as it gets using this method. What would it look like if I used the methods from last week? Glad you asked! Here's basically what it would look like:",
                "![An example of how this code would look if it was made using a component](https://i.ibb.co/JchpBLJ/this-post-component.png \"Quite the trim!\")",
                "Where did all the content go? Well the code for making the shape of the content would be inside the Javascript file, and would be reminiscent of the repetitive mess from [my second post](jacobengland.computer/blog/index#back-for-seconds). The content itself would likely be stored in a separate file that I would have the Javascript read and sort into the structure. That all seems like a very good improvement over how it started off, but with React we can do even better. Not only this post, but the entire blog would look like this if I was using React:",
                "![How the blog HTML would look if it was built using React](https://i.ibb.co/DMXBcYQ/this-post-react.png \"OK this is getting out of hand\")",
                "Wow! The whole blog would be inserted inside that single div element between the body tags! Why doesn't everyone just use React? Well honestly, for something like this blog React is almost definitely overkill. The React library is not a small file, so it comes with some less than optimal load times. One of the main reasons to use React is that it updates components as the information inside the components update, and on a blog like this the updates (generously) come once a day, so that kind of rendering isn't super beneficial. But this blog is just as much about me getting some practical practice in with the skills I'm learning as it is about me letting you all know what I'm up to, so I'll be refactoring the whole blog to use this system. This will also make the whole thing easier to work with and I'll be able to add some features that have been sitting in the backlog, like tags on the posts you can sort them by. I doubt it will be the last time I refactor the whole thing, so don't get too comfortable!"
            ]
        },
        {
            "id": "revisiting-nasa",
            "title": "Revisiting NASA",
            "date": "02/19/2020",
            "content": [
                "Today I opened the training kit to find out the project was identical to something I did independently just a few days ago: making a component that would show the NASA photo of the day. Even though I only did it a few days ago, my skillset has already grown to the point that features I couldn't figure out how to add then were now within my reach. Specifically, I initially set out with the intention of allowing the user to scroll to previous days' photos.",
                "Not only was I able to add that, but I also ended up adding a little calendar selector that let you pick any day you desired. You can see the final product [here](https://jacobengland.computer/nasa-photo-of-the-day), but this is a two day project so if you're looking at it between this blog post and the next one it's not pretty. The next post will be about styling so I'll make sure to include before and after pictures.",
                "This project is the first project I've built from scratch in React, which presented some unique challenges. I had to decide how the elements would be broken down into components, which ended up feeling a little inconsistent. For example I chose to make the photo and the buttons their own component, but the description and everything around it was included in one component. I'm thinking in the future for an app of this size I'm going to build out the entire app in one big block and then decide what should be a component from there. I am happy with the approach of building out functionality before adding any styling, but it's probably only possible because the app is this small.",
                "Overall, it's very interesting to see the very rapid progress I'm making within a very short time period. Just a few days ago I couldn't figure out how to re-render the photo when the user changed the date, but now I'm really starting to feel the benefits of using React, as one of its core features is that it repaints the whole page every time an element changes. I also have a good idea now of how I would have done it last week using only pure Javascript, so it seems like using React makes you stronger in Javascript as well, as opposed to something like a CSS preprocessor, which makes you get better at using the preprocessor instead of better at CSS. I'm looking forward to seeing what I'll be able to do in another week!"
            ]
        },
        {
            "id": "stylish",
            "title": "Stylish",
            "date": "02/20/2020",
            "content": [
                "The long awaited premium version of the NASA Photo of the Day site is now available [here](https://jacobengland.computer/nasa-photo-of-the-day)! It has taken quite a bit of work to get it to this state, most of which isn't shown because the cool styling library that I tried to use on it broke when I published it to the web. But if you're on desktop you can see a cool static background instead!",
                "I promised that I'd show before and after screenshots and I promise we'll get to that, but first let's talk about what was gone over today. We learned about two libraries that make styling the page a little bit easier. Well, one that makes styling absurdly easy and will make your page look like every other page that uses that library, and one that make styling a bit easier. I went with the second one, called styled-component. For the first few projects using Javascript I wrote my code in 3 different places: and HTML file for structure, a CSS file for styling, and a Javascript file for functionality. React allowed me to write in Javascript for structure and functionality at the same time, which was cool, but using styled-components I can also write all the styling in Javascript files!",
                "Of course in practice the amount of files doesn't actually end up being less, because I'm writing a Javascript file for every component on the page. But everything is so neatly packaged that fixing code or adjusting styling is much easier. For example, all the code for the left and right buttons on my page is contained in one component file, so if I wanted to turn the arrows green I'd just jump into that file and adjust it. This leads to much more readable code, which is always a plus. Let's get on to those before and after pictures though, I know that's what you're really here for. We'll start with before:",
                "![A screenshot of the old site, which was not very well styled at all](https://i.ibb.co/s6VWQCL/npod-past.png \"What a mess\")",
                "It's not great looking! But in my defense I did not include a single line of styling code because I knew the second day of the project was just styling the page. What was important about this page was that all the buttons and menus worked, which you're just going to have to believe worked. But when have I ever led you astray before? After a few hours of styling it ended up looking like this:",
                "![A much better looking site](https://i.ibb.co/NF9MYsr/npod-current.png \"Rest in peace particle background\")",
                "It's fairly basic, which mostly has to do with the fact that I spend most of my time trying to get a fun animated background to work. And I did get it to work, but for some reason when I ran it through the program to optimize it for web it broke. I might try to make it work using a different program at a later date, but for now it would be too much work for the result, as I know for certain the only daily user for this app uses it on mobile, where the background wouldn't even show up. Other than that tragedy it was a much more productive day than I anticipated, and I'm looking forward to using all of the skills I learned in my blog refactor."
            ]
        },
        {
            "id": "blog-2",
            "title": "Blog 2",
            "date": "02/25/2020",
            "content": [
                "The blog may not look different, but I can promise you it's been entirely refactored into React! It's got a few minor changes you might not notice at first glance but other than those it's basically the same blog as before, but in React. The real changes come behind the scenes, where I've made it somewhat easier to write blog posts.",
                "The content of the posts is now stored in a file on its own in a format called JSON, which is essentially just data that's been paired with labels. The main benefit of doing it this way is I don't have to worry about putting things in the right tags or messing up the code. While manually transferring the posts over to the new format, I found 3 programming errors and 4 typos! With the new format and a spelling checker installed, that shouldn't be happening anymore! Here's a picture of the posts in their new home:",
                "![A data object filled with the text of every post](https://i.ibb.co/V9Zp9pt/image.png \"This picture may contain spoilers for the rest of the post\")",
                "One challenge the refactoring presented was that the program that compiles everything into a file that I can host and you can see hashes the filenames of my local files, which means a lot of things we don't have time to get into. The main side-effect of this is that the filenames are taken from something semantic like nasa-app-old.png to gibberish like 3bbr6sgr5.png. This normally wouldn't be a problem but in this case since I was packing the images into the site to be uploaded with everything else, I was no longer able to put their filenames directly into the code. There are many workarounds for this, but the one that worked the best for me was simply to upload the images to a hosting site.",
                "But enough about the blog refactor, I know you're all dying to know what I'm learning about this week. We're continuing on with learning React libraries, starting with one called React Router. This allows me to turn multiple pages into one Single Page Application. What's a Single Page Application? I'm so glad you asked!",
                "If you were a student at Lambda, at this point they'd show you a confusing chart with boxes and arrows coming from the boxes and pointing at other boxes, but those never help me and I couldn't explain one even if I posted it. So I'll try to keep it simple: a single page application loads all of the website at once instead of loading up each page as you click on it. Then, through some Javascript voodoo, it makes the site still act like a multiple page website. Usually this just means changing which components are displayed on the page when you click on a button or link.",
                "This has the benefit of a much faster site, with no loading time in between pages. If you're keeping up, you can probably already guess that the main drawback is that it has a larger load time when you first load up the page. So it's not a panacea; you have to consider if making your page a SPA makes sense on a case by case basis.",
                "I am fairly certain I will be using certain elements of SPAs in this blog site. It already loads everything on one page, so at least for the sake of practice it would make sense to add routing. I'm most likely going to add a feature where you can click on a post's title to open it in a page of its own, which will also make linking to individual posts easier. I might also break up the main page of the blog into pages of posts so it's more neatly organized, which I'm also fairly certain I could do using routing. I suppose unless you're reading this post the day it was posted, you already know how it turned out, so this is a somewhat uninteresting tangent. I still have a second day of React Router to get through, so the rest of us will find out tomorrow!"
            ]
        },
        {
            "id": "formality",
            "title": "Formality",
            "date": "02/27/2020",
            "content": [
                "The past few days have been spent on doing forms in two different ways: from scratch and using a library. Forms may not seem like a big topic but they honestly form the backbone of how we as users interact with the web, so it's important to have a good grasp on them as a web developer.",
                "You might think that since I enjoyed using a library to make my sites so much that I'd also like to use a library to make my forms! You'd be wrong though, at least for now. The form library they taught us was not at all enjoyable to use, and it took me longer to understand the concepts of the library than it did for me to understand how to build my own form from scratch. I suppose not all libraries are created equally! Making forms in React is a surprisingly involved process when you compare it to the process of making on in just HTML and Javascript, so it's no surprise to me that a library would make or break the experience.",
                "Take, for example, just the part where you type into a form. In HTML/Javascript it could not be any easier- you make an input, give it a property of \"text,\" and call it a day. In React it's quite a bit more involved- you start by making an input and giving it a type of \"text\" but it's all downhill from there. You have to make a variable to store the text that the user is typing into the form, and write a function to update the text *as* the user is typing into it. You usually try to keep all this kind of thing in once place, so more often than not I have to write the function to store the text in one component and pass the function and the text into another component, which is always a headache.",
                "So why not use something to make it easier? Well I'm certainly not opposed to it, but the library that we used today was bulky and tried to solve all of my problems, but instead left me feeling like they had just made all my problems look a little bit different. I also prefer at this point the amount of control that I have over the process when I write everything myself. My Team Lead has a library he wrote for himself that he uses, and I think I might like to go down that route in the future to be quite honest. Time will tell though, I'll most likely find someone elses solution that's at least good enough."
            ]
        }
    ]
}